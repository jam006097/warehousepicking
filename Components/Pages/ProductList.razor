@page "/productlist"
@using PickingRoute.Components.Shared
@using PickingRoute.Models
@using PickingRoute.Services
@rendermode InteractiveServer
@inject ProductListService _productService

<PageTitle>ProducList</PageTitle>

<h1>Product List</h1>

@foreach (var item in _productItems)
{
	<ul class="list-unstyled">
		<li class="mb-3 d-flex align-items-center">
			@if (_editingProductItem != null && _editingProductItem.ProductId == item.ProductId)
			{
				<!--更新-->
				<ProductItemEditor ProductItem="_editingProductItem" OnSubmit="UpdateProductAsync" ButtonText="Save" />
			}
			else
			{
				<!--表示、編集ボタン-->
				<div class="d-inline-block me-3">@item.ProductName</div>
				<div class="d-inline-block me-3">@item.strangeLocationX</div>
				<div class="d-inline-block me-3">@item.strangeLocationY</div>
				<button @onclick="() => EnterEditMode(item)" class="btn btn-sm btn-primary me-2">Edit</button>
			}

			<!--削除ボタン-->
			<button @onclick="() => DeleteProductAsync(item.ProductId)" class="btn btn-sm btn-danger">Delete</button>
		</li>
	</ul>

}

<!--新規追加-->
<ProductItemEditor ProductItem="_newProductItem" OnSubmit="AddTodoAsync" ButtonText="Add" />

@code {
	private List<ProductItem> _productItems = new();
	private ProductItem _newProductItem = new ProductItem();
	private ProductItem? _editingProductItem;

	//初期化、商品リスト一覧の読み込み
	protected override async Task OnInitializedAsync()
	{
		await ReloadProductsAsync();
	}

	// 商品一覧の読み込む
	private async Task ReloadProductsAsync()
	{
		_productItems = await _productService.GetProductsAsync();
	}

	// 編集ボタンを押した時の処理
	// 対象商品をインスタンス化し、プロパティ値をコピーする
	private void EnterEditMode(ProductItem productItem)
	{
		_editingProductItem = new ProductItem
			{
				ProductId = productItem.ProductId,
				ProductName = productItem.ProductName,
				strangeLocationX = productItem.strangeLocationX,
				strangeLocationY = productItem.strangeLocationY
			};
	}

	// 更新
	private async Task UpdateProductAsync()
	{
		if (_editingProductItem != null)
		{
			await _productService.UpdateProductAsync(_editingProductItem);
			// 更新後、変数を初期化
			_editingProductItem = null;
			// 再読み込み
			await ReloadProductsAsync();
		}
	}

	// 削除
	private async Task DeleteProductAsync(int id)
	{
		await _productService.DeleteProductAsync(id);
		await ReloadProductsAsync();
	}

	// 追加
	private async Task AddTodoAsync()
	{
		await _productService.AddProductAsync(_newProductItem);
		// 追加後、変数を初期化
		_newProductItem = new ProductItem();
		// 再読み込み
		await ReloadProductsAsync();
	}



}
