@page "/productlist"
@using PickingRoute.Components.Shared
@using PickingRoute.Models
@using PickingRoute.Services
@rendermode InteractiveServer
@inject ProductListService _productService

<PageTitle>ProducList</PageTitle>

<h1>Product List</h1>

@foreach (var item in _productItems)
{
	<ul>
		<li>
			@if (_editingProductItem != null && _editingProductItem.ProductId == item.ProductId)
			{
				<!--更新-->
				<EditForm Model="_editingProductItem" OnValidSubmit="UpdateProductAsync">
					<DataAnnotationsValidator />

					<InputText @bind-Value="_editingProductItem.ProductName" placeholder="Edit title" />
					<ValidationMessage For="@(() => _editingProductItem.ProductName)" />

					<InputNumber @bind-Value="_editingProductItem.strangeLocationX" placeholder="Edit strangeLocationX" />
					<ValidationMessage For="@(() => _editingProductItem.strangeLocationX)" />

					<InputNumber @bind-Value="_editingProductItem.strangeLocationY" placeholder="Edit strangeLocationY" />
					<ValidationMessage For="@(() => _editingProductItem.strangeLocationY)" />

					<button type="submit">Save</button>
				</EditForm>
			}
			else
			{
				<!--表示、編集ボタン-->
				@item.ProductName
				@item.strangeLocationX
				@item.strangeLocationY
				<button @onclick="() => EnterEditMode(item)">Edit</button>
			}

			<!--削除ボタン-->
			<button @onclick="() => DeleteProductAsync(item.ProductId)">Delete</button>
		</li>
	</ul>

}

<!--新規追加-->
@*

<EditForm Model="_newProductItem" OnValidSubmit="AddTodoAsync" style="display: inline">
	<DataAnnotationsValidator />

	<input @bind="_newProductItem.ProductName" placeholder="New Product Name" />
	<ValidationMessage For="@(() => _newProductItem.ProductName)" />

	<input @bind="_newProductItem.strangeLocationX" placeholder="New strangeLocationX" />
	<ValidationMessage For="@(() => _newProductItem.strangeLocationX)" />

	<input @bind="_newProductItem.strangeLocationY" placeholder="New strangeLocationY" />
	<ValidationMessage For="@(() => _newProductItem.strangeLocationY)" />

	<button type="submit">Add</button>
</EditForm>
*@
<ProductItemEditor ProductItem="_newProductItem" OnSubmit="AddTodoAsync" Placeholder="New Product Name" ButtonText="Add" />

@code {
	private List<ProductItem> _productItems = new();
	private ProductItem _newProductItem = new ProductItem();
	private ProductItem? _editingProductItem;

	//初期化、商品リスト一覧の読み込み
	protected override async Task OnInitializedAsync()
	{
		await ReloadProductsAsync();
	}

	// 商品一覧の読み込む
	private async Task ReloadProductsAsync()
	{
		_productItems = await _productService.GetProductsAsync();
	}

	// 編集ボタンを押した時の処理
	// 対象商品をインスタンス化し、プロパティ値をコピーする
	private void EnterEditMode(ProductItem productItem)
	{
		_editingProductItem = new ProductItem
			{
				ProductId = productItem.ProductId,
				ProductName = productItem.ProductName,
				strangeLocationX = productItem.strangeLocationX,
				strangeLocationY = productItem.strangeLocationY
			};
	}

	// 更新
	private async Task UpdateProductAsync()
	{
		if (_editingProductItem != null)
		{
			await _productService.UpdateProductAsync(_editingProductItem);
			// 更新後、変数を初期化
			_editingProductItem = null;
			// 再読み込み
			await ReloadProductsAsync();
		}
	}

	// 削除
	private async Task DeleteProductAsync(int id)
	{
		await _productService.DeleteProductAsync(id);
		await ReloadProductsAsync();
	}

	// 追加
	private async Task AddTodoAsync()
	{
		await _productService.AddProductAsync(_newProductItem);
		// 追加後、変数を初期化
		_newProductItem = new ProductItem();
		// 再読み込み
		await ReloadProductsAsync();
	}



}
