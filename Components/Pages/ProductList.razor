
@page "/productlist"
@using PickingRoute.Components.Shared
@using PickingRoute.Models
@using PickingRoute.Services
@rendermode InteractiveServer
@inject ProductListService _productService

<PageTitle>Product List</PageTitle>

<!-- 商品追加枠 -->
<div class="container my-5">
    <h1 class="display-4 text-center mb-4">商品追加</h1>
    <div class="card mt-4">
        <div class="card-body">
            <h5 class="card-title">新しい商品を追加</h5>
            <ProductItemEditor ProductItem="_newProductItem" OnSubmit="AddTodoAsync" ButtonText="Add" />
        </div>
    </div>
</div>

<!-- 商品一覧枠 -->
<div class="container my-5">
    <h1 class="display-4 text-center mb-4">商品一覧</h1>
    <div class="list-group">
        @foreach (var item in _productItems)
        {
            <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                @if (_editingProductItem != null && _editingProductItem.ProductId == item.ProductId)
				{
					<div class="container my-5">
						<h1 class="display-4 text-center mb-4"></h1>
						<div class="card mt-4">
							<div class="card-body">
								<h5 class="card-title">商品を編集</h5>
								<ProductItemEditor ProductItem="_editingProductItem" OnSubmit="UpdateProductAsync" ButtonText="Save" />
							</div>
						</div>
					</div>
				}
				else
				{
					<!-- 商品表示、編集・削除ボタン -->
					<div class="flex-grow-1 d-flex justify-content-between">
						<div>
							<div class="fw-bold">商品名：@item.ProductName</div>
							<div class="text-muted">保存場所：@item.Shelf.Name</div>
                        </div>
                        <div>
                            <button @onclick="() => EnterEditMode(item)" class="btn btn-sm btn-primary me-2">Edit</button>
                            <button @onclick="() => DeleteProductAsync(item.ProductId)" class="btn btn-sm btn-danger">Delete</button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- 処理成否のメッセージ表示領域 -->
@if (!string.IsNullOrEmpty(_latestMessage))
{
    <div class="fixed-bottom alert @(_isLatestMessageSuccess ? "alert-success" : "alert-danger") m-3" @onclick="ClearMessage">
        @_latestMessage
    </div>

}

@code {
    /// <summary>
    /// 商品リストを管理するリスト。
    /// </summary>
    private List<ProductItem> _productItems = new();

    /// <summary>
    /// 新規追加する商品のデータを保持するオブジェクト。
    /// </summary>
    private ProductItem _newProductItem = new ProductItem();

    /// <summary>
    /// 編集中の商品のデータを保持するオブジェクト。
    /// </summary>
    private ProductItem? _editingProductItem;

    /// <summary>
    /// 処理結果のメッセージ。
    /// </summary>
    private string? _latestMessage;

    /// <summary>
    /// 処理結果の成功可否を示すフラグ。
    /// </summary>
    private bool _isLatestMessageSuccess;

    /// <summary>
    /// 初期化、商品リスト一覧の読み込み。
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await ReloadProductsAsync();
    }

    /// <summary>
    /// 商品一覧を読み込むメソッド。
    /// </summary>
    private async Task ReloadProductsAsync()
    {
        try
        {
            _productItems = await _productService.GetProductsAsync();
        }
        catch (ProductListServiceException ex)
        {
            SetUserMessage($"商品の読み込みエラー: {ex.Message}", false);
        }
    }

    /// <summary>
    /// 編集ボタンを押した時の処理。
    /// 対象商品をインスタンス化し、プロパティ値をコピーする。
    /// </summary>
    /// <param name="productItem">編集対象の商品データ</param>
    private void EnterEditMode(ProductItem productItem)
    {
        _editingProductItem = new ProductItem
        {
            ProductId = productItem.ProductId,
            ProductName = productItem.ProductName,
            ShelfId = productItem.ShelfId,
            Shelf = productItem.Shelf
        };
    }

    /// <summary>
    /// 商品を更新するメソッド。
    /// </summary>
    private async Task UpdateProductAsync()
    {
        if (_editingProductItem != null)
        {
            try
            {
                await _productService.UpdateProductAsync(_editingProductItem);
                // 更新後、変数を初期化
                _editingProductItem = null;
                // 再読み込み
                await ReloadProductsAsync();
                SetUserMessage("商品が正常に更新されました。", true);
            }
            catch (ProductListServiceException ex)
            {
                SetUserMessage($"商品の更新エラー: {ex.Message}", false);
            }
        }
    }

    /// <summary>
    /// 商品を削除するメソッド。
    /// </summary>
    /// <param name="id">削除対象の商品ID</param>
    private async Task DeleteProductAsync(int id)
    {
        try
        {
            await _productService.DeleteProductAsync(id);
            await ReloadProductsAsync();
            SetUserMessage("商品が正常に削除されました。", true);
        }
        catch (ProductListServiceException ex)
        {
            SetUserMessage($"商品の削除エラー: {ex.Message}", false);
        }
    }

    /// <summary>
    /// 新しい商品を追加するメソッド。
    /// </summary>
    private async Task AddTodoAsync()
    {
        try
        {
            await _productService.AddProductAsync(_newProductItem);
            // 追加後、変数を初期化
            _newProductItem = new ProductItem();
            // 再読み込み
            await ReloadProductsAsync();
            SetUserMessage("商品が正常に追加されました。", true);
        }
        catch (ProductListServiceException ex)
        {
            SetUserMessage($"商品の追加エラー: {ex.Message}", false);
        }
    }

    /// <summary>
    /// 処理結果のメッセージを設定するメソッド。
    /// </summary>
    /// <param name="message">表示するメッセージ</param>
    /// <param name="isSuccess">成功か失敗かを示すフラグ</param>
    private void SetUserMessage(string message, bool isSuccess)
    {
        _latestMessage = message + " " + DateTime.Now.ToString("HH:mm:ss");
        _isLatestMessageSuccess = isSuccess;
    }

    // メッセージをクリアするメソッド。
    private void ClearMessage()
    {
        _latestMessage = null;
        StateHasChanged();
    }
}
