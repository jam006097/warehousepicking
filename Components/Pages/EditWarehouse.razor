@page "/editwarehouse"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PickingRoute.Data
@using PickingRoute.Models
@using PickingRoute.Services
@inject ApplicationDbContext dbContext
@inject RouteCalculator RouteCalculator

<div class="container my-5">
    <h1 class="display-4 text-center mb-4">倉庫配置図の編集</h1>

    <!-- SVG 要素内でのマウスの動きを追跡 -->
    <div class="svg-container">
        <svg width="800" height="600" @onmousemove="OnMouseMove" @onmouseup="OnMouseUp" @onkeydown="HandleKeyDown" tabindex="0">

            <!-- 背面に描画するために通路を先に描画 -->
            @foreach (var path in _Paths)
            {
                <line x1="@path.StartX" y1="@path.StartY" x2="@path.EndX" y2="@path.EndY" 
                class="@((path == selectedPath) ? "line-selected" : "line-deselected")" stroke-width="10" 
                @onmousedown="@(e => OnPathMouseDown(e, path))" @onclick="@(e => SelectPath(path))"/>
                <circle cx="@path.StartX" cy="@path.StartY" r="5" class="circle-start" 
                @onmousedown="@(e => OnPathStartMouseDown(e, path))" />
                <circle cx="@path.EndX" cy="@path.EndY" r="5" class="circle-end" 
                @onmousedown="@(e => OnPathEndMouseDown(e, path))" />
            }

            @foreach (var shelf in _Shelves)
            {
                <!-- 棚の位置とサイズを描画 -->
                <rect x="@shelf.X" y="@shelf.Y" width="@shelf.Width" height="@shelf.Height" 
                class="@(shelf == selectedShelf ? "rect-selected" : "rect-deselected")" 
                @onmousedown="@(e => OnShelfMouseDown(e, shelf))" @onclick="@(e => SelectShelf(shelf))"/>

                <foreignObject x="@(shelf.X)" y="@(shelf.Y)" width="450" height="30" style="pointer-events: none;">
                    <body xmlns="http://www.w3.org/1999/xhtml" class="foreign-object-body">
                        <!-- 棚の名前を表示するテキストボックス。ダブルクリックで編集モードになる -->
                        <input type="text" id="shelf-@shelf.Id" @bind="shelf.Name" @onblur="@(async e => await OnShelfNameChanged(shelf))" 
                        class="form-control-plaintext input-plaintext" style="pointer-events: auto;" size="@Math.Max(1, shelf.Name.Length)" autocomplete="off" />

                    </body>
                </foreignObject>

                <!-- リサイズハンドルを描画 --> 
                <polygon points="@(shelf.X + shelf.Width - 10),@(shelf.Y + shelf.Height) 
                                 @(shelf.X + shelf.Width),@(shelf.Y + shelf.Height - 10) 
                                 @(shelf.X + shelf.Width),@(shelf.Y + shelf.Height)" 
                class="resize-handle" @onmousedown="@(e => OnResizeHandleMouseDown(e, shelf))" style="pointer-events: all;" />
            }
        </svg>
    </div>

    <!-- SVG枠外に配置するボタン -->
    <div class="outside-controls text-center mt-3">
        <button class="btn btn-primary me-2" @onclick="async () => await AddNewShelf()">新しい棚を追加</button>
        <button class="btn btn-primary" @onclick="async () => await AddNewPath()">新しい通路を追加</button>
    </div>
</div>

@code {

	// 定数
	// 新しい棚と通路の出現位置
	private const double NewShelfX = 10;
	private const double NewShelfY = 520;
	private const string NewShelfName = "新しい棚";
	private const double NewPathStartX = 10;
	private const double NewPathStartY = 540;
	private const double NewPathEndX = 110;
	private const double NewPathEndY = 540;

	// フィールド
	private List<Shelf> _Shelves = new();
	private Shelf? draggingShelf; // ドラッグ中の棚
	private bool isDragging = false; // ドラッグ状態のフラグ
	private double offsetX, offsetY;　// マウスと棚の位置のオフセット
	private Shelf? newShelf; // 新しい棚の情報を保持
	private Shelf? resizingShelf; // リサイズ中の棚
	private Shelf? selectedShelf;	// 現在選択されている棚を保持する変数
	private List<WarehousePath> _Paths = new();  // 通路のリストを初期化
	private WarehousePath? newPath; // 追加: 新しい通路の情報を保持
	private WarehousePath? draggingPath; // ドラッグ中の通路
	private bool isDraggingStartPoint = false; // 始点をドラッグ中のフラグ
	private bool isDraggingEntirePath = false; // 通路全体をドラッグ中のフラグ
	private double initialMouseX, initialMouseY; // 初期マウス位置
	private WarehousePath? selectedPath; // 現在選択されている通路を保持する変数


	/// <summary>
	/// 初期化処理
	/// </summary>
	/// <returns></returns>
	protected override async Task OnInitializedAsync()
	{
		_Shelves = await dbContext.Shelves.ToListAsync();
		_Paths = await dbContext.Paths.ToListAsync();
	}

	/// <summary> 
	/// 棚のマウスダウンイベントハンドラ。ドラッグを開始する。
	/// </summary> 
	/// <param name="e"></param> 
	/// <param name="shelf"></param>
	private void OnShelfMouseDown(MouseEventArgs e, Shelf shelf) 
	{
		StartDragging(e, shelf);
	}

	/// <summary>
	/// ドラッグ開始の共通処理
	/// </summary>
	/// <param name="e"></param>
	/// <param name="shelf"></param>
	private void StartDragging(MouseEventArgs e, Shelf shelf)
	{
		draggingShelf = shelf; 
		isDragging = true;  
		offsetX = e.ClientX - shelf.X; 
		offsetY = e.ClientY - shelf.Y; 
	}

	/// <summary> 
	/// マウスムーブイベントハンドラ。通路や棚の位置を更新する。
	/// </summary>
	/// <param name="e"></param>
	private void OnMouseMove(MouseEventArgs e)
	{
		UpdateDraggingPosition(e);
	}

	/// <summary>
	/// ドラッグ中の位置を更新する処理
	/// </summary>
	/// <param name="e">マウスイベント</param>
	private void UpdateDraggingPosition(MouseEventArgs e)
	{
		if (!isDragging) return;

		if (draggingShelf != null)
		{
			UpdateShelfPosition(e);
		}
		else if (resizingShelf != null)
		{
			ResizeShelf(e);
		}
		else if (isDraggingEntirePath && draggingPath != null)
		{
			MoveEntirePath(e);
		}
		else if (draggingPath != null)
		{
			MovePathEndpoint(e);
		}
	}

	/// <summary>
	/// 棚の位置を更新する
	/// </summary>
	/// <param name="e">マウスイベント</param>
	private void UpdateShelfPosition(MouseEventArgs e)
	{
		draggingShelf.X = e.ClientX - offsetX;
		draggingShelf.Y = e.ClientY - offsetY;
		StateHasChanged();
	}

	/// <summary>
	/// 棚のサイズをリサイズする
	/// </summary>
	/// <param name="e">マウスイベント</param>
	private void ResizeShelf(MouseEventArgs e)
	{
		resizingShelf.Width = Math.Max(10, e.ClientX - resizingShelf.X - offsetX);
		resizingShelf.Height = Math.Max(10, e.ClientY - resizingShelf.Y - offsetY);
		StateHasChanged();
	}

	/// <summary>
	/// 1つの通路全体を移動する
	/// </summary>
	/// <param name="e">マウスイベント</param>
	private void MoveEntirePath(MouseEventArgs e)
	{
		double deltaX = e.ClientX - initialMouseX;
		double deltaY = e.ClientY - initialMouseY;

		draggingPath.StartX += deltaX;
		draggingPath.StartY += deltaY;
		draggingPath.EndX += deltaX;
		draggingPath.EndY += deltaY;

		initialMouseX = e.ClientX;
		initialMouseY = e.ClientY;

		StateHasChanged();
	}

	/// <summary>
	/// 通路の端点を移動する
	/// </summary>
	/// <param name="e">マウスイベント</param>
	private void MovePathEndpoint(MouseEventArgs e)
	{
		if (isDraggingStartPoint)
		{
			draggingPath.StartX = e.ClientX - offsetX;
			draggingPath.StartY = e.ClientY - offsetY;
		}
		else
		{
			draggingPath.EndX = e.ClientX - offsetX;
			draggingPath.EndY = e.ClientY - offsetY;
		}
		StateHasChanged();
	}

	/// <summary>
	/// マウスアップイベントハンドラ。ドラッグやリサイズを終了し、データベースに保存する。
	/// </summary> /// <param name="e"></param>
	private async void OnMouseUp(MouseEventArgs e)
	{
		await StopDraggingAndSave(e);
	}

	/// <summary>
	/// ドラッグやリサイズを終了し、変更をデータベースに保存する処理
	/// </summary>
	/// <param name="e">マウスイベント</param>
	private async Task StopDraggingAndSave(MouseEventArgs e)
	{
		if (!isDragging) return;

		isDragging = false;
		if (draggingShelf != null)
		{
			await SaveShelfPosition(draggingShelf);
			draggingShelf = null;
		}
		else if (resizingShelf != null)
		{
			await SaveShelfSize(resizingShelf);
			resizingShelf = null;
		}
		else if (isDraggingEntirePath && draggingPath != null)
		{
			await SavePathPosition(draggingPath);
			draggingPath = null;
			isDraggingEntirePath = false;
		}
		else if (draggingPath != null)
		{
			await SavePathPosition(draggingPath);
			draggingPath = null;
		}
	}

	/// <summary>
	/// 棚の位置をデータベースに保存する
	/// </summary>
	/// <param name="shelf">対象の棚</param>
	private async Task SaveShelfPosition(Shelf shelf)
	{
		var dbShelf = await dbContext.Shelves.FindAsync(shelf.Id);
		if (dbShelf != null)
		{
			dbShelf.X = shelf.X;
			dbShelf.Y = shelf.Y;
			await dbContext.SaveChangesAsync();
		}
	}

	/// <summary>
	/// 棚のサイズをデータベースに保存する
	/// </summary>
	/// <param name="shelf">対象の棚</param>
	private async Task SaveShelfSize(Shelf shelf)
	{
		var dbShelf = await dbContext.Shelves.FindAsync(shelf.Id);
		if (dbShelf != null)
		{
			dbShelf.Width = shelf.Width;
			dbShelf.Height = shelf.Height;
			await dbContext.SaveChangesAsync();
		}
	}

	/// <summary>
	/// 通路の位置をデータベースに保存する
	/// </summary>
	/// <param name="path">対象の通路</param>
	private async Task SavePathPosition(WarehousePath path)
	{
		var dbPath = await dbContext.Paths.FindAsync(path.Id);
		if (dbPath != null)
		{
			dbPath.StartX = path.StartX;
			dbPath.StartY = path.StartY;
			dbPath.EndX = path.EndX;
			dbPath.EndY = path.EndY;
			await dbContext.SaveChangesAsync();
		}
	}

	/// <summary>
	///  新しい棚を追加するメソッド 
	///  </summary> 
	private async Task AddNewShelf() 
	{ 
		newShelf = new Shelf { Name = NewShelfName, X = NewShelfX, Y = NewShelfY }; // 初期位置を中央に設定 
		_Shelves.Add(newShelf); // ローカルリストに追加 
		dbContext.Shelves.Add(newShelf); // データベースに追加 
		await dbContext.SaveChangesAsync(); // データベースに保存 
		newShelf = null; // 新しい棚の情報をクリア 
		StateHasChanged(); // UIを更新 
	}

	/// <summary>
	/// 新しい通路を追加するメソッド
	/// </summary>
	private async Task AddNewPath()
	{
		newPath = new WarehousePath { StartX = NewPathStartX, StartY = NewPathStartY, EndX = NewPathEndX, EndY = NewPathEndY }; // 初期位置を設定
		_Paths.Add(newPath); // ローカルリストに追加
		dbContext.Paths.Add(newPath); // データベースに追加
		await dbContext.SaveChangesAsync(); // データベースに保存
		newPath = null; // 新しい通路の情報をクリア
		StateHasChanged(); // UIを更新
	}

	/// <summary>
	/// 棚の名前を編集モードに切り替えるメソッド。 
	/// </summary> 
	/// <param name="shelf"></param> 
	private void EditShelfName(Shelf shelf) 
	{
		shelf.Name = ""; // 空にしてユーザーが新しい名前を入力できるようにする 
		StateHasChanged(); // UIを更新する 
	}

	/// <summary>
	/// 棚の名前をデータベースに保存する
	/// </summary>
	/// <param name="shelf">対象の棚</param>
	private async Task SaveShelfName(Shelf shelf) 
	{ 
		var dbShelf = await dbContext.Shelves.FindAsync(shelf.Id); 
		if (dbShelf != null) 
		{ 
			dbShelf.Name = shelf.Name; 
			await dbContext.SaveChangesAsync(); 
		} 
	}

	/// <summary>
	/// 棚の名前が変更されたときにデータベースに保存する
	/// </summary>
	/// <param name="shelf">対象の棚</param>
	private async Task OnShelfNameChanged(Shelf shelf) 
	{ 
		await SaveShelfName(shelf); 
		StateHasChanged(); 
	}

	/// <summary>
    /// リサイズハンドルのマウスダウンイベントハンドラ。リサイズを開始する。
    /// </summary>
    /// <param name="e">マウスイベント</param>
    /// <param name="shelf">対象の棚</param>
	private void OnResizeHandleMouseDown(MouseEventArgs e, Shelf shelf) 
	{ 
		resizingShelf = shelf; // リサイズ中の棚をセット 
		isDragging = true; // ドラッグ中フラグをセット 
		offsetX = e.ClientX - (shelf.X + shelf.Width); // マウスのX座標と棚の右端の差を計算
		offsetY = e.ClientY - (shelf.Y + shelf.Height); // マウスのY座標と棚の下端の差を計算
	}

	/// <summary>
	/// 通路の始点のマウスダウンイベントハンドラ。ドラッグを開始する。
	/// </summary>
	/// <param name="e">マウスイベント</param>
	/// <param name="path">対象の通路</param>
	private void OnPathStartMouseDown(MouseEventArgs e, WarehousePath path)
	{
		StartDraggingPath(e, path, true);
	}

	/// <summary>
	/// 通路の終点のマウスダウンイベントハンドラ。ドラッグを開始する。
	/// </summary>
	/// <param name="e">マウスイベント</param>
	/// <param name="path">対象の通路</param>
	private void OnPathEndMouseDown(MouseEventArgs e, WarehousePath path)
	{
		StartDraggingPath(e, path, false);
	}

	///  <summary>
	/// １つの通路全体のマウスダウンイベントハンドラ。ドラッグを開始する。
	/// </summary>
	/// <param name="e">マウスイベント</param>
	/// <param name="path">対象の通路</param>
	private void OnPathMouseDown(MouseEventArgs e, WarehousePath path)
	{
		StartDraggingPath(e, path, true, entirePath: true);
	}

	/// <summary>
    /// 通路のドラッグ開始処理
    /// </summary>
    /// <param name="e">マウスイベント</param>
    /// <param name="path">対象の通路</param>
    /// <param name="isStartPoint">始点かどうか</param>
    /// <param name="entirePath">通路全体かどうか</param>
	private void StartDraggingPath(MouseEventArgs e, WarehousePath path, bool isStartPoint, bool entirePath = false)
    {
        draggingPath = path;
        isDragging = true;
        isDraggingStartPoint = isStartPoint;
        isDraggingEntirePath = entirePath;
        initialMouseX = e.ClientX;
        initialMouseY = e.ClientY;
        offsetX = isStartPoint ? e.ClientX - path.StartX : e.ClientX - path.EndX;
        offsetY = isStartPoint ? e.ClientY - path.StartY : e.ClientY - path.EndY;
    }

	/// <summary>
	/// 棚をクリックした時に選択状態にするメソッド
	/// </summary>
	/// <param name="shelf">クリックされた棚</param>
	private void SelectShelf(Shelf shelf)
	{
		SelectItem(shelf, null);
	}

	/// <summary>
	/// 通路をクリックした時に選択状態にするメソッド
	/// </summary>
	/// <param name="path">クリックされた通路</param>
	private void SelectPath(WarehousePath path)
	{
		SelectItem(null, path);
	}

	/// <summary>
    /// アイテム選択処理
    /// </summary>
    /// <param name="shelf">対象の棚</param>
    /// <param name="path">対象の通路</param>
    private void SelectItem(Shelf? shelf, WarehousePath? path)
    {
        selectedShelf = shelf;
        selectedPath = path;
        StateHasChanged();
    }

	/// <summary>
	/// キーボードのキー押下イベントを処理するメソッド
	/// </summary>
	/// <param name="e">キーボードイベント</param>
	private async Task HandleKeyDown(KeyboardEventArgs e)
	{
		if (e.Key == "Delete" || e.Key == "Backspace")
		{
			if (selectedShelf != null)
			{
				await RemoveShelf(selectedShelf);
			}
			else if (selectedPath != null)
			{
				await RemovePath(selectedPath);
			}
		}
		else if (e.Key == "Escape")
		{
			DeselectAll();
		}
	}

	/// <summary>
	/// 棚を削除するメソッド
	/// </summary>
	/// <param name="shelf">削除する棚</param>
	private async Task RemoveShelf(Shelf shelf)
	{
		await RemoveItem(_Shelves, shelf, async () =>
		{
			dbContext.Shelves.Remove(shelf);
			await Task.CompletedTask; // 非同期メソッドとして扱うために Task.CompletedTask を使用
		});
	}

	/// <summary>
	/// 通路を削除するメソッド
	/// </summary>
	/// <param name="path">削除する通路</param>
	private async Task RemovePath(WarehousePath path)
	{
		await RemoveItem(_Paths, path, async () => 
		{
			dbContext.Paths.Remove(path);
			await Task.CompletedTask; // 非同期メソッドとして扱うために Task.CompletedTask を使用
		});
	}

	/// <summary>
    /// アイテム削除共通処理
    /// </summary>
    /// <param name="list">削除するアイテムのリスト</param>
    /// <param name="item">削除するアイテム</param>
    /// <param name="removeAction">削除アクション</param>
    private async Task RemoveItem<T>(List<T> list, T item, Func<Task> removeAction)
    {
        list.Remove(item);
        await removeAction();
        await dbContext.SaveChangesAsync();
        selectedShelf = null;
        selectedPath = null;
        StateHasChanged();
    }
	/// <summary>
    /// すべての選択を解除するメソッド
    /// </summary>
    private void DeselectAll()
    {
        selectedShelf = null;
        selectedPath = null;
        StateHasChanged();
    }

}

