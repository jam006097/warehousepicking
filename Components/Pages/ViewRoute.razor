@page "/viewroute"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PickingRoute.Data
@using PickingRoute.Models
@using PickingRoute.Services
@inject ApplicationDbContext dbContext
@inject RouteCalculator RouteCalculator
@inject RouteService RouteService

<div class="container">
    <h1 class="display-4 text-center mb-4">ピッキングルート</h1>

    <!--倉庫の配置図-->
    <div class="svg-container">
        <svg width="800" height="600" tabindex="0">
            @if (_Paths != null)
            {
                @foreach (var path in _Paths)
                {
                    <line x1="@path.StartX" y1="@path.StartY" x2="@path.EndX" y2="@path.EndY" class="line-deselected" stroke-width="10" />
                }
            }

            @if (_Shelves != null)
            {
                @foreach (var shelf in _Shelves)
                {
                    <!-- 棚の位置とサイズを描画 -->
                    <rect x="@shelf.X" y="@shelf.Y" width="@shelf.Width" height="@shelf.Height" class="rect-deselected" />
                }
            }

			@if (RouteService.Routes != null)
			{
				<!-- 最適経路を描画 -->
				@for (int i = 0; i < RouteService.Routes.Count - 1; i++)
				{
					var pointA = RouteService.Routes[i];
					var pointB = RouteService.Routes[i + 1];
					<!-- 経路のラインを描画 -->
					<line x1="@pointA.X" y1="@pointA.Y" x2="@pointB.X" y2="@pointB.Y" stroke="rgba(173, 216, 230, 0.8)" stroke-width="10" />
				}
			}

			@if (RouteService.optimalItems != null)
			{
				@for (int i = 0; i < RouteService.optimalItems.Count; i++)
				{
					var item = RouteService.optimalItems[i];
					var shelf = item.Shelf;
					var textx = shelf.X;
					var texty = shelf.Y + 10;
					<!-- 商品名を描画 -->
					<foreignObject x="@textx" y="@texty" width="200" height="20">
						@(i + 1). @item.ProductName
					</foreignObject>
				}
			}
		</svg>
    </div>

    <h2 class="apple-subheading">ルート</h2>
    <ol class="apple-list">
        @if (RouteService.optimalItems != null && RouteService.optimalItems.Any())
        {
            @foreach (var item in RouteService.optimalItems)
            {
                <li class="apple-list-item">商品名: @item.ProductName</li>
            }
        }
        else
        {
            <li class="apple-list-item">まだルートが作成されていません。</li>
        }
    </ol>
</div>



@code {

	private List<Shelf> _Shelves = new();
	private List<WarehousePath> _Paths = new();

	/// <summary>
	/// 初期化処理
	/// </summary>
	/// <returns></returns>
	protected override async Task OnInitializedAsync()
	{
		try
		{
			_Shelves = await dbContext.Shelves.ToListAsync();
			_Paths = await dbContext.Paths.ToListAsync();

		}
		catch (Exception ex)
		{
			Console.WriteLine($"データ読み込みエラー: {ex.Message}");
		}
	}

}
