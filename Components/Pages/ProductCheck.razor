@page "/productcheck"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PickingRoute.Data
@using PickingRoute.Models
@using PickingRoute.Services
@inject ApplicationDbContext dbContext

<h1>ピッキングリスト作成</h1>

@foreach (var item in _productItems)
{
	<ul>
		<li>
			@item.ProductName
			<input type="checkbox" @onclick="() => UpdatePickingList(item)">
		</li>
	</ul>
}

<h2>ピッキングリスト</h2>

<ul>
	@foreach (var item in _PickingItems)
	{
		<li>@item.ProductName</li>
	}
</ul>


<h2>ピッキングルート</h2>
<button　type ="button" class="btn btn-primary" @onclick=" () => CalculateGreedyRoute(_PickingItems)">
	最短経路</button>
<ul>
	@foreach (var item in _optimalRoute)
	{
		<li>@item.ProductName</li>
	}
</ul>

<h2>商品の配置図</h2>
<svg width="800" height="600" style="border : 1px solid black;">
	<!-- 商品の円とテキストを先に描画-->
	@for (int i = 0; i < _optimalRoute.Count; i++)
	{
		var item = _optimalRoute[i];
		var shelf = item.Shelf; 
		var textx = shelf.X + 10; 
		var texty = shelf.Y - 10;

		<!--商品の円を描画-->
		<circle cx="@shelf.X" cy="@shelf.Y" r="10" fill="blue" />

		<!--商品名を描画-->
		<foreignObject x="@textx" y="@texty" width="200" height="20">
			@(i + 1). @item.ProductName
		</foreignObject>

	}

	<!-- 前面に出すため、商品間の矢印を後に描画する-->
	@for (int i = 0; i < _optimalRoute.Count - 1; i++)
	{
		var item = _optimalRoute[i];
		var nextItem = _optimalRoute[i + 1];
		var currentShelf = item.Shelf; 
		var nextShelf = nextItem.Shelf;

		<!-- 商品間の矢印を描画-->
		<line x1="@currentShelf.X" y1="@currentShelf.Y" x2="@nextShelf.X" y2="@nextShelf.Y" stroke="red" marker-end="url(#arrowhead)" />
	}
	<!--矢印の定義-->
	<defs>
		<marker id="arrowhead" markerWidth="15" markerHeight="10" refX="10" refY="5" orient="auto">
			<polygon points="0 0, 15 5, 0 10" fill="red" />
		</marker>
	</defs>
</svg>

<h2>倉庫内の配置図</h2>
<!-- SVG 要素内でのマウスの動きを追跡 -->
<!--onmousemove と onmouseup を svg タグに設定: SVG全体でマウスの動きを追跡し、確実にイベントをキャッチするため。-->
<svg width="800" height="600" style="border: 1px solid black;" @onmousemove="OnMouseMove" @onmouseup="OnMouseUp">
	@foreach (var shelf in _Shelves) 
	{ 
		<!-- 棚の位置とサイズを描画 -->
		<!--onmousedown を rect タグに設定: ドラッグの開始点を正確に特定するため。-->
		<rect x="@shelf.X" y="@shelf.Y" width="@shelf.Width" height="@shelf.Height" fill="lightgray" stroke="black" @onmousedown="@(e => OnShelfMouseDown(e, shelf))" />

		<foreignObject x="@(shelf.X)" y="@(shelf.Y)" width="450" height="30">
			<body xmlns="http://www.w3.org/1999/xhtml" style="background-color: transparent;" >
				<!-- 棚の名前を表示するテキストボックス。ダブルクリックで編集モードになる -->
				<input type="text" id="shelf-@shelf.Id" @bind="shelf.Name" class="form-control-plaintext" style="background-color: transparent; width: auto; min-width: 50px; max-width: 400px; padding: 2px; border: none;" size="@Math.Max(1, shelf.Name.Length)" autocomplete="off" />
			</body>
		</foreignObject>

		<!-- リサイズハンドルを描画 --> 
		<polygon points="@(shelf.X + shelf.Width - 10),@(shelf.Y + shelf.Height) @(shelf.X + shelf.Width),@(shelf.Y + shelf.Height - 10) @(shelf.X + shelf.Width),@(shelf.Y + shelf.Height)" fill="rgba(0,0,0,0.5)" cursor="nwse-resize" @onmousedown="@(e => OnResizeHandleMouseDown(e, shelf))" style="pointer-events: all;" />

	}
</svg>

<h2>新しい棚を追加</h2> 
<button class="btn btn-primary" @onclick="AddNewShelf">新しい棚を追加</button>
@foreach (var shelf in _Shelves)
{
	<li>@shelf.Name </li>
}

@code {
	private List<ProductItem> _productItems = new();
	private List<ProductItem> _PickingItems = new();
	private List<ProductItem> _optimalRoute = new();

	private List<Shelf> _Shelves = new();
	private Dictionary<int, ElementReference> shelfElements = new(); 
	private Shelf? draggingShelf; // ドラッグ中の棚
	private bool isDragging = false; // ドラッグ状態のフラグ
	private double offsetX, offsetY;　// マウスと棚の位置のオフセット

	private bool isAddingShelf = false; // 新しい棚を追加するフラグ
	private Shelf? newShelf; // 新しい棚の情報を保持
	private const double CenterX = 400; // 倉庫内配置図の中央のX座標
	private const double CenterY = 300; // 倉庫内配置図の中央のY座標

	private Shelf? resizingShelf; // リサイズ中の棚

	/// <summary>
	/// 初期化処理
	/// 商品一覧を取得する
	/// </summary>
	/// <returns></returns>
	protected override async Task OnInitializedAsync()
	{
		_productItems = await dbContext.ProductItems.ToListAsync();
		_Shelves = await dbContext.Shelves.ToListAsync();
	}

	/// <summary>
	/// ピッキングリストを作成・更新する
	/// </summary>
	/// <param name="item"></param>
	private void UpdatePickingList(ProductItem item)
	{
		if (!_PickingItems.Contains(item))
		{
			_PickingItems.Add(item);
		}
		else
		{
			_PickingItems.Remove(item);
		}
	}

	/// <summary>
	/// 貪欲法を使用して、リスト内の商品を最短距離で並べ替えます。
	/// </summary>
	/// <param name="products"></param>
	/// <returns></returns>
	private void CalculateGreedyRoute(List<ProductItem> products)
	{
		_optimalRoute = new List<ProductItem>();
		var remainingProducts = new List<ProductItem>(products);
		var currentProduct = remainingProducts[0];

		_optimalRoute.Add(currentProduct);
		remainingProducts.RemoveAt(0);

		while (remainingProducts.Any())
		{
			var nextProduct = remainingProducts
			.OrderBy(p => GetDistance(currentProduct, p))
			.First();
			_optimalRoute.Add(nextProduct);
			remainingProducts.Remove(nextProduct);
			currentProduct = nextProduct;
		}
	}

	/// <summary>
	///  ユーグリッド距離を計算します。
	///  2点をまっすぐ結んだ線の長さです。
	/// </summary>
	/// <param name="a"></param>
	/// <param name="b"></param>
	/// <returns></returns>
	private double GetDistance(ProductItem a, ProductItem b)
	{
		return Math.Sqrt(Math.Pow(a.Shelf.X - b.Shelf.X, 2) + Math.Pow(a.Shelf.Y - b.Shelf.Y, 2));
	}

	/// <summary> 
	/// マウスダウンイベントハンドラ。対象の棚を特定し、ドラッグを開始する。
	/// </summary> 
	/// <param name="e"></param> 
	/// <param name="shelf"></param>
	private void OnShelfMouseDown(MouseEventArgs e, Shelf shelf) 
	{
		draggingShelf = shelf; // ドラッグ中の棚をセット
		isDragging = true;  // ドラッグ中フラグをセット
		offsetX = e.ClientX - shelf.X; // マウスのX座標と棚のX座標の差を計算
		offsetY = e.ClientY - shelf.Y; // マウスのY座標と棚のY座標の差を計算
	}

	/// <summary> 
	/// マウスムーブイベントハンドラ。棚の位置を更新する。
	/// </summary>
	/// <param name="e"></param>
	private void OnMouseMove(MouseEventArgs e)
	{
		if (isDragging)
		{
			if (draggingShelf != null)
			{
				draggingShelf.X = e.ClientX - offsetX; // 新しいX座標を計算
				draggingShelf.Y = e.ClientY - offsetY; // 新しいY座標を計算
				StateHasChanged(); // UIを更新する
			}
			else if (resizingShelf != null)
			{
				resizingShelf.Width = Math.Max(10, e.ClientX - resizingShelf.X - offsetX); // 新しい幅を計算
				resizingShelf.Height = Math.Max(10, e.ClientY - resizingShelf.Y - offsetY); // 新しい高さを計算
				StateHasChanged(); // UIを更新する
			}
		}
	}

	/// <summary> 
	/// マウスアップイベントハンドラ。ドラッグを終了し、新しい位置を保存する。 
	/// </summary> /// <param name="e"></param>
	private async void OnMouseUp(MouseEventArgs e)
	{
		if (isDragging)
		{
			isDragging = false; // ドラッグ中フラグをリセット
			if (draggingShelf != null)
			{
				var shelf = await dbContext.Shelves.FindAsync(draggingShelf.Id);
				if (shelf != null)
				{
					shelf.X = draggingShelf.X; // 新しいX座標を保存
					shelf.Y = draggingShelf.Y; // 新しいY座標を保存
					await dbContext.SaveChangesAsync(); // データベースに保存
				}
				draggingShelf = null; // ドラッグ中の棚をリセット
			}
			else if (resizingShelf != null)
			{
				var shelf = await dbContext.Shelves.FindAsync(resizingShelf.Id);
				if (shelf != null)
				{
					shelf.Width = resizingShelf.Width; // 新しい幅を保存
					shelf.Height = resizingShelf.Height; // 新しい高さを保存
					await dbContext.SaveChangesAsync(); // データベースに保存
				}
				resizingShelf = null; // リサイズ中の棚をリセット
			}
		}
	}


	/// <summary> 
	///  新しい棚を追加するメソッド 
	///  </summary> 
	private async void AddNewShelf() 
	{ 
		newShelf = new Shelf { Name = "新しい棚", X = CenterX, Y = CenterY }; // 初期位置を中央に設定 
		_Shelves.Add(newShelf); // ローカルリストに追加 
		dbContext.Shelves.Add(newShelf); // データベースに追加 
		await dbContext.SaveChangesAsync(); // データベースに保存 
		isAddingShelf = false; // フラグをリセット 
		newShelf = null; // 新しい棚の情報をクリア 
		StateHasChanged(); // UIを更新 
	}

	/// <summary>
	/// 棚の名前を編集モードに切り替えるメソッド。 
	/// </summary> 
	/// <param name="shelf"></param> 
	private void EditShelfName(Shelf shelf) 
	{
		shelf.Name = ""; // 空にしてユーザーが新しい名前を入力できるようにする 
		StateHasChanged(); // UIを更新する 
	}

	/// <summary> 
	/// リサイズハンドルのマウスダウンイベントハンドラ。リサイズを開始する。
	///  </summary>
	///  <param name="e"></param>
	///  <param name="shelf"></param> 
	private void OnResizeHandleMouseDown(MouseEventArgs e, Shelf shelf) 
	{ 
		resizingShelf = shelf; // リサイズ中の棚をセット 
		isDragging = true; // ドラッグ中フラグをセット 
		offsetX = e.ClientX - (shelf.X + shelf.Width); // マウスのX座標と棚の右端の差を計算
		offsetY = e.ClientY - (shelf.Y + shelf.Height); // マウスのY座標と棚の下端の差を計算
	}


}
